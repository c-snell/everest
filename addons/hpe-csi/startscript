#! /bin/bash
# Let us wait for some time for entrypoint to fire
while ! [ -p /tmp/pipe ]; do sleep 5; done

if grep -wq "true" /etc/bootstrap/debugMode; then
    set -x
else
    exec &>> /tmp/pipe
fi


TEMPLATES_DIR="/templates"
WORKSPACE_DIR="/workspace"
ADDON="hpe-csi"
CONFIG_FILE="/etc/bootstrap/config"
VERSION="$(cat /etc/bootstrap/version)"
FROM_VERSION="$(cat /etc/bootstrap/from_version)"
K8S_VERSION="$(cat /tools/k8s_version)"

HPE_CSI_NAMESPACE="hpe-csi-driver"

# Utility functions to set error and initialize on the deployment configmap
set_deployment_success() {
    kubectl patch configmap/hpecp-bootstrap-$ADDON --type merge -p '{"data":{"initialize":"false","error":"false"}}'
}

set_deployment_error() {
    kubectl patch configmap/hpecp-bootstrap-$ADDON --type merge -p '{"data":{"initialize":"false","error":"true"}}'
}

clear_rollback() {
    kubectl patch configmap/hpecp-bootstrap-$ADDON --type merge -p '{"data":{"rollback":"false"}}'
}

set_reconfigure_success() {
    kubectl patch configmap/hpecp-bootstrap-$ADDON --type merge -p '{"data":{"reconfigure":"false","error":"false"}}'
}

set_reconfigure_error() {
    kubectl patch configmap/hpecp-bootstrap-$ADDON --type merge -p '{"data":{"reconfigure":"false","error":"true"}}'
}

set_upgrade_success() {
    kubectl patch configmap/hpecp-bootstrap-$ADDON --type merge -p '{"data":{"upgrade":"false","error":"false"}}'
}

set_upgrade_error() {
    kubectl patch configmap/hpecp-bootstrap-$ADDON --type merge -p '{"data":{"upgrade":"false","error":"true"}}'
}

# install related action for deploying hpe-csi
# bdconfig (bds_XXX_YYY) variables are available as environnment variables
# /etc/bootstrap/config files are available through configmap
install() {
    echo "$(date): Starting hpe-csi install process"

    # copy from templates to workspace
    chmod 755 $WORKSPACE_DIR
    cp -a $TEMPLATES_DIR/* $WORKSPACE_DIR

    echo "installing chart $ADDON"

    kubectl create namespace $HPE_CSI_NAMESPACE

    helm repo add hpe https://hpe-storage.github.io/co-deployments

    helm repo update

    if ! helm install install $ADDON hpe/hpe-csi-driver --version=1.3.0 --namespace $HPE_CSI_NAMESPACE; then
         echo "failed to install helm charts"
         set_deployment_error
         return 0
    fi

    done

    set_deployment_success
    return 0
}

upgrade() {
    echo "$(date): Starting hpe-csi upgrade process"

    prepare_values
    
    helm repo update

    if ! helm upgrade hpe/hpe-csi-driver --version=1.3.0 --namespace $HPE_CSI_NAMESPACE; then
         echo "failed to upgrade helm chart"
         set_upgrade_error
         return 0
    fi

    set_reconfigure_success
    return 0
}

# TEMPLATES_DIR will have the templates from new image and
# WORKSPACE_DIR will contain the existing modified ones.
# FROM_VERSION will contain the version that we are upgrading from
reconfigure() {
    echo "$(date): Starting hpe-csi reconfigure process"

    # TODO add code to reconfigure hpe-csi and test

    set_reconfigure_success
    return 0
}

rollback() {
    echo "$(date): Starting hpe-csi rollback process"

    helm uninstall $ADDON --namespace $HPE_CSI_NAMESPACE

    kubectl delete namespace $HPE_CSI_NAMESPACE

    clear_rollback
    return 0
}

if [ "$1" == "--install" ]
then
    install
elif [ "$1" == "--rollback" ]
then
    rollback
elif [ "$1" == "--reconfigure" ]
then
    reconfigure
elif [ "$1" == "--upgrade" ]
then
    upgrade
else
    echo "invalid argument"
fi
