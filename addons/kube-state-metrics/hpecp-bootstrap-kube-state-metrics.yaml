apiVersion: v1
kind: ConfigMap
metadata:
  name: hpecp-bootstrap-kube-state-metrics
  namespace: hpecp-bootstrap
data:
  debugMode: "false"
  initialize: "true"
  error: "false"
  rollback: "false"
  reconfigure: "false"
  upgrade: "false"
  from_version: ""
  version: "$version$"
  config: |-
    # Default values for kube-state-metrics.
    prometheusScrape: true
    image:
      repository: quay.io/coreos/kube-state-metrics
      tag: v1.9.6
      pullPolicy: IfNotPresent
    
    # If set to true, this will deploy kube-state-metrics as a StatefulSet and the data
    # will be automatically sharded across <.Values.replicas> pods using the built-in
    # autodiscovery feature: https://github.com/kubernetes/kube-state-metrics#automated-sharding
    # This is an experimental feature and there are no stability guarantees.
    autosharding:
      enabled: false
    
    replicas: 1
    
    service:
      port: 8080
      targetPort: 8080
      # Default to clusterIP for backward compatibility
      type: NodePort
      nodePort: 0
      loadBalancerIP: ""
      annotations: {}
    
    customLabels: {}
    
    hostNetwork: false
    
    rbac:
      # If true, create & use RBAC resources
      create: true
    
    serviceAccount:
      # Specifies whether a ServiceAccount should be created, require rbac true
      create: true
      # The name of the ServiceAccount to use.
      # If not set and create is true, a name is generated using the fullname template
      name:
      # Reference to one or more secrets to be used when pulling images
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      imagePullSecrets: []
    
    prometheus:
      monitor:
        enabled: false
        additionalLabels: {}
        namespace: ""
        honorLabels: false
    
    ## Specify if a Pod Security Policy for kube-state-metrics must be created
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
    ##
    podSecurityPolicy:
      enabled: false
      annotations: {}
        ## Specify pod annotations
        ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
        ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
        ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
        ##
        # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
        # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
        # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'
    
      additionalVolumes: []
    
    securityContext:
      enabled: true
      runAsUser: 65534
      fsGroup: 65534
    
    ## Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}
    
    ## Affinity settings for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    affinity: {}
    
    ## Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []
    
    # Annotations to be added to the pod
    podAnnotations: {}
    
    ## Assign a PriorityClassName to pods if set
    # priorityClassName: ""
    
    # Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podDisruptionBudget: {}
    
    # Available collectors for kube-state-metrics. By default all available
    # collectors are enabled.
    collectors:
      certificatesigningrequests: true
      configmaps: true
      cronjobs: true
      daemonsets: true
      deployments: true
      endpoints: true
      horizontalpodautoscalers: true
      ingresses: true
      jobs: true
      limitranges: true
      mutatingwebhookconfigurations: true
      namespaces: true
      networkpolicies: true
      nodes: true
      persistentvolumeclaims: true
      persistentvolumes: true
      poddisruptionbudgets: true
      pods: true
      replicasets: true
      replicationcontrollers: true
      resourcequotas: true
      secrets: true
      services: true
      statefulsets: true
      storageclasses: true
      validatingwebhookconfigurations: true
      verticalpodautoscalers: false
      volumeattachments: true
    
    # Namespace to be enabled for collecting resources. By default all namespaces are collected.
    # namespace: ""
    
    ## Override the deployment namespace
    ##
    namespaceOverride: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hpecp-bootstrap-kube-state-metrics
  namespace: hpecp-bootstrap
spec:
  replicas: 0
  selector:
    matchLabels:
      name: hpecp-bootstrap-kube-state-metrics
  template:
    metadata:
      labels:
        name: hpecp-bootstrap-kube-state-metrics
    spec:
      # This priorityClassName is only supported outside of kube-system in
      # K8s version 1.17.
      #priorityClassName: system-cluster-critical
      tolerations:
        - effect: NoSchedule
          operator: Exists
          key: node-role.kubernetes.io/master
        - key: CriticalAddonsOnly
          operator: Exists
      serviceAccountName: hpecp-bootstrap
      # initContainer is used to copy the kubectl binary and helm binary
      # into a shared emptyDir that the main container can use
      initContainers:
      - name: kube-state-metrics-init
        # Will be replaced by HCP when deploying this deployment
        image: "$hpecp_bootstrap_repo$/hpecp-bootstrap-tools:$tools_version$"
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 256Mi
            cpu: 250m
        envFrom:
        - configMapRef:
            name: hpecp-bootstrap-bdconfig
        volumeMounts:
          - name: config-volume
            mountPath: /etc/bootstrap
          - name: tools-volume
            mountPath: /tools
        command:
          - "sh"
          - "-c"
          - |
            /usr/local/bin/setup.sh
      containers:
      - name: kube-state-metrics
        # Will be replaced by HCP when deploying this deployment
        image: "$hpecp_bootstrap_repo$/hpecp-bootstrap-kube-state-metrics:$version$"
        imagePullPolicy: IfNotPresent
        # postStart will launch the startscript based on phase in configmap
        resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 256Mi
            cpu: 250m
        lifecycle:
          postStart:
            exec:
              command:
                - "sh"
                - "-c"
                - |
                  if grep -wq "true" /etc/bootstrap/debugMode; then
                    exit 0;
                  fi;
                  if grep -wq "true" /etc/bootstrap/initialize; then
                    /usr/local/bin/startscript --install;
                  fi;
                  if grep -wq "true" /etc/bootstrap/rollback; then
                    /usr/local/bin/startscript --rollback;
                  fi;
                  if grep -wq "true" /etc/bootstrap/reconfigure; then
                    /usr/local/bin/startscript --reconfigure;
                  fi;
                  if grep -wq "true" /etc/bootstrap/upgrade; then
                    /usr/local/bin/startscript --upgrade;
                  fi
        envFrom:
        - configMapRef:
            name: hpecp-bootstrap-bdconfig
        volumeMounts:
          - name: tools-volume
            mountPath: /tools
          - name: config-volume
            mountPath: /etc/bootstrap
          - name: workspace-volume
            mountPath: /workspace
      volumes:
        - name: tools-volume
          emptyDir:
            sizeLimit: "1Gi"
        - name: config-volume
          configMap:
            defaultMode: 0666
            name: hpecp-bootstrap-kube-state-metrics
        - name: workspace-volume
          $workspace_volume_type$
            $workspace_volume_info$
