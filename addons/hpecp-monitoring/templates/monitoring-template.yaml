---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-daemonset-config
  namespace: @@@K8SNAMESPACE@@@
  labels:
    k8s-app: metricbeat
data:
  metricbeat.yml: |-
    metricbeat.config.modules:
      # Mounted `metricbeat-daemonset-modules` configmap:
      path: ${path.config}/modules.d/*.yml
      # Reload module configs as they change:
      reload.enabled: false

    # To enable hints based autodiscover uncomment this:
    #metricbeat.autodiscover:
    #  providers:
    #    - type: kubernetes
    #      host: ${NODE_NAME}
    #      hints.enabled: true

    processors:
      - add_cloud_metadata:

    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}

    # Internal queue configuration for buffering events to be published.
    queue:
      # Queue type by name (default 'mem')
      # The memory queue will present all available events (up to the outputs
      # bulk_max_size) to the output, the moment the output is ready to server
      # another batch of events.
      mem:
        # Max number of events the queue can buffer.
        events: 8192

        # Hints the minimum number of events stored in the queue,
        # before providing a batch of events to the outputs.
        # The default value is set to 2048.
        # A value of 0 ensures events are immediately available
        # to be sent to the outputs.
        flush.min_events: 4096

        # Maximum duration after which events are available to the outputs,
        # if the number of events stored in the queue is < min_flush_events.
        flush.timeout: 30s

    output.elasticsearch:
      @@@HOST_ARRAY_SLUG_LINE_1@@@
      @@@HOST_ARRAY_SLUG_LINE_2@@@
      @@@HOST_ARRAY_SLUG_LINE_3@@@
      username: @@@elasticwriter@@@
      password: @@@elasticwriterpass@@@

      # Queing and batching config params
      max_retries: 10
      bulk_max_size: 1000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-daemonset-modules
  namespace: @@@K8SNAMESPACE@@@
  labels:
    k8s-app: metricbeat
data:
  system.yml: |-
    - module: system
      period: 30s
      metricsets:
        # collect the host metrics traditionally collected by the metricbeat running in
        # the monitoring container
        - cpu
        - load
        - memory
        - network
        - diskio
        #- core
        #- socket
        - process
        - process_summary
      processes: ['.*']
      process.include_top_n:
        by_cpu: 5      # include top 5 processes by CPU
        by_memory: 5   # include top 5 processes by memory
      processors:
        - include_fields:
            fields: ['beat.hostname', 'beat.name', 'host.name', 'metricset.host', 'metricset.name', 'metricset.module',
            'system.cpu.user.pct', 'system.diskio.name', 'system.diskio.write.bytes', 'system.diskio.read.bytes',
            'system.load.1', 'system.process.fd.open', 'system.memory.swap.used.bytes', 'system.memory.used.bytes',
            'system.network.in.bytes', 'system.network.name', 'system.network.out.bytes']

    - module: system
      period: 1m
      metricsets:
        - filesystem
        - fsstat
      processors:
      - drop_event.when.regexp:
          system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'
  kubernetes.yml: |-
    - module: kubernetes
      metricsets:
        - node
        - system
        - pod
        - container
        - volume
      period: 30s
      labels.dedot: true
      annotations.dedot: true
      processors:
        - add_kubernetes_metadata:
            labels.dedot: true
            annotations.dedot: true
        - include_fields:
            fields: ['metricset.module', 'metricset.name', 'kubernetes.namespace', 'kubernetes.node.name', 'kubernetes.pod.name',
                    'kubernetes.pod.uid', 'kubernetes.container.name', 'kubernetes.volume.name', 'beat.hostname', 'kubernetes.labels.name',
                    'kubernetes.labels.kubedirector_hpe_com/kdcluster',
                    'kubernetes.labels.kubedirector_hpe_com/role',
                    'kubernetes.labels.kubedirector_hpe_com/kdapp',
                    'kubernetes.labels.kubedirector_hpe_com/appCatalog',
                    'kubernetes.node.fs.available.bytes', 'kubernetes.node.fs.capacity.bytes',
                    'kubernetes.container.cpu.usage.core.ns', 'kubernetes.container.cpu.usage.limit.pct', 'kubernetes.container.cpu.usage.nanocores',
                    'kubernetes.container.cpu.usage.node.pct', 'kubernetes.system.container', 'kubernetes.pod.cpu.usage.node.pct',
                    'kubernetes.pod.cpu.usage.nanocores', 'kubernetes.pod.cpu.usage.limit.pct', 'kubernetes.pod.memory.usage.limit.pct',
                    'kubernetes.pod.memory.usage.node.pct', 'kubernetes.pod.memory.usage.bytes', 'kubernetes.pod.network.rx.bytes',
                    'kubernetes.pod.network.tx.bytes', 'kubernetes.pod.network.rx.errors', 'kubernetes.pod.network.tx.errors',
                    'kubernetes.container.memory.available.bytes', 'kubernetes.container.memory.usage.bytes',
                    'kubernetes.container.memory.usage.limit.pct', 'kubernetes.container.memory.usage.node.pct',
                    'kubernetes.container.rootfs.available.bytes', 'kubernetes.container.rootfs.capacity.bytes',
                    'kubernetes.container.rootfs.used.bytes', 'kubernetes.volume.fs.available.bytes', 'kubernetes.volume.fs.capacity.bytes',
                    'kubernetes.volume.fs.used.bytes', 'kubernetes.system.cpu.usage.nanocores', 'kubernetes.system.memory.usage.bytes']
      host: ${NODE_NAME}
      #hosts: ["localhost:10255"]
      # If using Red Hat OpenShift remove the previous hosts entry and
      # uncomment these settings:
      hosts: ["https://${HOSTNAME}:10250"]
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      ssl.certificate_authorities:
        - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      ssl.verification_mode: none
---
# Deploy a Metricbeat instance per node for node metrics retrieval
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: metricbeat
  namespace: @@@K8SNAMESPACE@@@
  labels:
    k8s-app: metricbeat
spec:
  selector:
    matchLabels:
      k8s-app: metricbeat
  template:
    metadata:
      labels:
        k8s-app: metricbeat
    spec:
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          operator: Exists
      serviceAccountName: metricbeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: metricbeat
        image: bluedata/metricbeat:@@@VERSION@@@
        args: [
          "-c", "/etc/metricbeat.yml",
          "-e",
          "-system.hostfs=/hostfs",
        ]
        env:
        @@@HOST_SLUG_LINE_1@@@
          @@@HOST_SLUG_LINE_2@@@
        @@@HOST_SLUG_LINE_3@@@
          @@@HOST_SLUG_LINE_4@@@
        @@@HOST_SLUG_LINE_5@@@
          @@@HOST_SLUG_LINE_6@@@
        - name: ELASTICSEARCH_PORT
          value: "9210"
        - name: ELASTICSEARCH_USERNAME
          value: @@@elasticwriter@@@
        - name: ELASTICSEARCH_PASSWORD
          value: @@@elasticwriterpass@@@
        - name: ELASTIC_CLOUD_ID
          value:
        - name: ELASTIC_CLOUD_AUTH
          value:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 250Mi
        volumeMounts:
        - name: config
          mountPath: /etc/metricbeat.yml
          readOnly: true
          subPath: metricbeat.yml
        - name: modules
          mountPath: /usr/share/metricbeat/modules.d
          readOnly: true
        - name: dockersock
          mountPath: /var/run/docker.sock
        - name: proc
          mountPath: /hostfs/proc
          readOnly: true
        - name: cgroup
          mountPath: /hostfs/sys/fs/cgroup
          readOnly: true
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: config
        configMap:
          defaultMode: 0600
          name: metricbeat-daemonset-config
      - name: modules
        configMap:
          defaultMode: 0600
          name: metricbeat-daemonset-modules
      - name: data
        hostPath:
          path: /var/lib/metricbeat-data
          type: DirectoryOrCreate
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-deployment-config
  namespace: @@@K8SNAMESPACE@@@
  labels:
    k8s-app: metricbeat
data:
  metricbeat.yml: |-
    metricbeat.config.modules:
      # Mounted `metricbeat-daemonset-modules` configmap:
      path: ${path.config}/modules.d/*.yml
      # Reload module configs as they change:
      reload.enabled: false

    processors:
      - add_cloud_metadata:

    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}

    # Internal queue configuration for buffering events to be published.
    queue:
      # Queue type by name (default 'mem')
      # The memory queue will present all available events (up to the outputs
      # bulk_max_size) to the output, the moment the output is ready to server
      # another batch of events.
      mem:
        # Max number of events the queue can buffer.
        events: 8192

        # Hints the minimum number of events stored in the queue,
        # before providing a batch of events to the outputs.
        # The default value is set to 2048.
        # A value of 0 ensures events are immediately available
        # to be sent to the outputs.
        flush.min_events: 4096

        # Maximum duration after which events are available to the outputs,
        # if the number of events stored in the queue is < min_flush_events.
        flush.timeout: 30s

    output.elasticsearch:
      @@@HOST_ARRAY_SLUG_LINE_1@@@
      @@@HOST_ARRAY_SLUG_LINE_2@@@
      @@@HOST_ARRAY_SLUG_LINE_3@@@
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}

      # Queing and batching config params
      max_retries: 10
      bulk_max_size: 1000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metricbeat-deployment-modules
  namespace: @@@K8SNAMESPACE@@@
  labels:
    k8s-app: metricbeat
data:
  # This module requires `kube-state-metrics` up and running under `@@@K8SNAMESPACE@@@` namespace
  kubernetes.yml: |-
    - module: kubernetes
      metricsets:
        - state_node
        - state_deployment
        - state_replicaset
        - state_pod
        - state_container
        # Uncomment this to get k8s events:
        #- event
      period: 60s
      labels.dedot: true
      annotations.dedot: true
      processors:
        - add_kubernetes_metadata:
            labels.dedot: true
            annotations.dedot: true
        - include_fields:
            fields: ['metricset.module', 'metricset.name', 'kubernetes.namespace', 'kubernetes.node.name', 'kubernetes.pod.name',
                    'kubernetes.pod.uid', 'kubernetes.container.name', 'kubernetes.volume.name', 'beat.hostname', 'kubernetes.labels.name',
                    'kubernetes.labels.kubedirector_hpe_com/kdcluster',
                    'kubernetes.labels.kubedirector_hpe_com/role',
                    'kubernetes.labels.kubedirector_hpe_com/kdapp',
                    'kubernetes.labels.kubedirector_hpe_com/appCatalog',
                    'kubernetes.replicaset.name', 'kubernetes.container.status.phase', 'kubernetes.container.status.ready',
                    'kubernetes.container.status.reason', 'kubernetes.node.status.ready',
                    'kubernetes.node.cpu.allocatable.cores', 'kubernetes.node.cpu.capacity.cores',
                    'kubernetes.node.memory.allocatable.bytes', 'kubernetes.node.memory.capacity.bytes',
                    'kubernetes.container.id', 'kubernetes.container.cpu.limit.cores', 'kubernetes.container.cpu.request.cores',
                    'kubernetes.container.memory.limit.bytes', 'kubernetes.container.memory.request.bytes', 'kubernetes.pod.status.phase',
                    'kubernetes.pod.status.ready', 'kubernetes.deployment.replicas.available', 'kubernetes.deployment.replicas.desired',
                    'kubernetes.deployment.replicas.unavailable', 'kubernetes.deployment.replicas.updated', 'kubernetes.replicaset.replicas.available',
                    'kubernetes.replicaset.replicas.desired', 'kubernetes.replicaset.replicas.ready',
                    'kubernetes.node.pod.allocatable.total', 'kubernetes.node.pod.capacity.total']
      host: ${NODE_NAME}
      hosts: ["kube-state-metrics:8080"]
---
# Deploy singleton instance in the whole cluster for some unique data sources, like kube-state-metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metricbeat
  namespace: @@@K8SNAMESPACE@@@
  labels:
    k8s-app: metricbeat
spec:
  selector:
    matchLabels:
      k8s-app: metricbeat
  template:
    metadata:
      labels:
        k8s-app: metricbeat
    spec:
      tolerations:
        - effect: NoSchedule
          operator: Exists
          key: node-role.kubernetes.io/master
        - key: CriticalAddonsOnly
          operator: Exists
      serviceAccountName: metricbeat
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: metricbeat
        image: bluedata/metricbeat:@@@VERSION@@@
        args: [
          "-c", "/etc/metricbeat.yml",
          "-e",
        ]
        env:
        @@@HOST_SLUG_LINE_1@@@
          @@@HOST_SLUG_LINE_2@@@
        @@@HOST_SLUG_LINE_3@@@
          @@@HOST_SLUG_LINE_4@@@
        @@@HOST_SLUG_LINE_5@@@
          @@@HOST_SLUG_LINE_6@@@
        - name: ELASTICSEARCH_PORT
          value: "9210"
        - name: ELASTICSEARCH_USERNAME
          value: @@@elasticwriter@@@
        - name: ELASTICSEARCH_PASSWORD
          value: @@@elasticwriterpass@@@
        - name: ELASTIC_CLOUD_ID
          value:
        - name: ELASTIC_CLOUD_AUTH
          value:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 100m
            memory: 1Gi
        volumeMounts:
        - name: config
          mountPath: /etc/metricbeat.yml
          readOnly: true
          subPath: metricbeat.yml
        - name: modules
          mountPath: /usr/share/metricbeat/modules.d
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0600
          name: metricbeat-deployment-config
      - name: modules
        configMap:
          defaultMode: 0600
          name: metricbeat-deployment-modules
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metricbeat
subjects:
- kind: ServiceAccount
  name: metricbeat
  namespace: @@@K8SNAMESPACE@@@
roleRef:
  kind: ClusterRole
  name: metricbeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metricbeat
  labels:
    k8s-app: metricbeat
rules:
- apiGroups: [""]
  resources:
  - nodes
  - namespaces
  - events
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources:
  - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  - deployments
  verbs: ["get", "list", "watch"]
- apiGroups:
  - ""
  resources:
  - nodes/stats
  verbs:
  - get
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metricbeat
  namespace: @@@K8SNAMESPACE@@@
  labels:
    k8s-app: metricbeat
---
